diff --git a/mm/frame_vector.c b/mm/frame_vector.c
index 0e589a9..e4a252d 100644
--- a/mm/frame_vector.c
+++ b/mm/frame_vector.c
@@ -37,6 +37,9 @@ int get_vaddr_frames(unsigned long start, unsigned int nr_frames,
 	struct mm_struct *mm = current->mm;
 	struct vm_area_struct *vma;
 	int ret = 0;
+#if defined(CONFIG_ARCH_R9A09G011GBG) || defined(CONFIG_ARCH_R9A09G055MA3GBG) || defined(CONFIG_ARCH_R9A07G054)
+	int err;
+#endif
 	int locked;
 
 	if (nr_frames == 0)
@@ -73,14 +76,44 @@ int get_vaddr_frames(unsigned long start, unsigned int nr_frames,
 		vec->is_pfns = false;
 		ret = pin_user_pages_locked(start, nr_frames,
 			gup_flags, (struct page **)(vec->ptrs), &locked);
+#if defined(CONFIG_ARCH_R9A09G011GBG) || defined(CONFIG_ARCH_R9A09G055MA3GBG) || defined(CONFIG_ARCH_R9A07G054)
+		goto out;
+#else
 		if (likely(ret > 0))
 			goto out;
+#endif
 	}
 
+#if defined(CONFIG_ARCH_R9A09G011GBG) || defined(CONFIG_ARCH_R9A09G055MA3GBG) || defined(CONFIG_ARCH_R9A07G054)
+	vec->got_ref = false;
+	vec->is_pfns = true;
+	do {
+		unsigned long *nums = frame_vector_pfns(vec);
+
+		while (ret < nr_frames && start + PAGE_SIZE <= vma->vm_end) {
+			err = follow_pfn(vma, start, &nums[ret]);
+			if (err) {
+				if (ret == 0)
+					ret = err;
+				goto out;
+			}
+			start += PAGE_SIZE;
+			ret++;
+		}
+		/*
+		 * We stop if we have enough pages or if VMA doesn't completely
+		 * cover the tail page.
+		 */
+		if (ret >= nr_frames || start < vma->vm_end)
+			break;
+		vma = find_vma_intersection(mm, start, start + 1);
+	} while (vma && vma->vm_flags & (VM_IO | VM_PFNMAP));
+#else
 	/* This used to (racily) return non-refcounted pfns. Let people know */
 	WARN_ONCE(1, "get_vaddr_frames() cannot follow VM_IO mapping");
 	vec->nr_frames = 0;
 
+#endif
 out:
 	if (locked)
 		mmap_read_unlock(mm);
