diff --git a/omx/gstomxh265enc.c b/omx/gstomxh265enc.c
index ea14ca7..cd232c7 100644
--- a/omx/gstomxh265enc.c
+++ b/omx/gstomxh265enc.c
@@ -27,6 +27,9 @@
 
 #include "gstomxh265enc.h"
 #include "gstomxh265utils.h"
+#if defined (USE_OMX_TARGET_RCAR) && defined (HAVE_VIDEOENC_EXT)
+#include "OMXR_Extension_vecmn.h"
+#endif
 
 GST_DEBUG_CATEGORY_STATIC (gst_omx_h265_enc_debug_category);
 #define GST_CAT_DEFAULT gst_omx_h265_enc_debug_category
@@ -40,6 +43,8 @@ static void gst_omx_h265_enc_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec);
 static void gst_omx_h265_enc_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec);
+static GstFlowReturn gst_omx_h265_enc_handle_output_frame (GstOMXVideoEnc *
+    self, GstOMXPort * port, GstOMXBuffer * buf, GstVideoCodecFrame * frame);
 
 enum
 {
@@ -49,6 +54,10 @@ enum
   PROP_B_FRAMES,
   PROP_CONSTRAINED_INTRA_PREDICTION,
   PROP_LOOP_FILTER_MODE,
+#ifdef USE_OMX_TARGET_RCAR
+  PROP_SEND_EOS,
+  PROP_USE_INCAPS_HEADER
+#endif
 };
 
 #define GST_OMX_H265_VIDEO_ENC_PERIODICITY_OF_IDR_FRAMES_DEFAULT    (0xffffffff)
@@ -56,6 +65,10 @@ enum
 #define GST_OMX_H265_VIDEO_ENC_B_FRAMES_DEFAULT (0xffffffff)
 #define GST_OMX_H265_VIDEO_ENC_CONSTRAINED_INTRA_PREDICTION_DEFAULT (FALSE)
 #define GST_OMX_H265_VIDEO_ENC_LOOP_FILTER_MODE_DEFAULT (0xffffffff)
+#ifdef USE_OMX_TARGET_RCAR
+#define GST_OMX_H265_VIDEO_ENC_SEND_EOS_DEFAULT      FALSE
+#define GST_OMX_H265_VIDEO_ENC_USE_INCAPS_HEADER_DEFAULT      FALSE
+#endif
 
 #ifdef USE_OMX_TARGET_ZYNQ_USCALE_PLUS
 /* zynqultrascaleplus's OMX uses a param struct different of Android's one */
@@ -104,15 +117,43 @@ gst_omx_h265_enc_loop_filter_mode_get_type (void)
 }
 #endif
 
+static gboolean
+gst_omx_h265_enc_flush (GstVideoEncoder * enc)
+{
+  GstOMXH265Enc *self = GST_OMX_H265_ENC (enc);
+
+  g_list_free_full (self->headers, (GDestroyNotify) gst_buffer_unref);
+  self->headers = NULL;
+
+  return GST_VIDEO_ENCODER_CLASS (parent_class)->flush (enc);
+}
+
+static gboolean
+gst_omx_h265_enc_stop (GstVideoEncoder * enc)
+{
+  GstOMXH265Enc *self = GST_OMX_H265_ENC (enc);
+
+  g_list_free_full (self->headers, (GDestroyNotify) gst_buffer_unref);
+  self->headers = NULL;
+
+  return GST_VIDEO_ENCODER_CLASS (parent_class)->stop (enc);
+}
+
 static void
 gst_omx_h265_enc_class_init (GstOMXH265EncClass * klass)
 {
   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
   GstElementClass *element_class = GST_ELEMENT_CLASS (klass);
+  GstVideoEncoderClass *basevideoenc_class = GST_VIDEO_ENCODER_CLASS (klass);
   GstOMXVideoEncClass *videoenc_class = GST_OMX_VIDEO_ENC_CLASS (klass);
 
   videoenc_class->set_format = GST_DEBUG_FUNCPTR (gst_omx_h265_enc_set_format);
   videoenc_class->get_caps = GST_DEBUG_FUNCPTR (gst_omx_h265_enc_get_caps);
+  videoenc_class->handle_output_frame =
+      GST_DEBUG_FUNCPTR (gst_omx_h265_enc_handle_output_frame);
+
+  basevideoenc_class->flush = gst_omx_h265_enc_flush;
+  basevideoenc_class->stop = gst_omx_h265_enc_stop;
 
   gobject_class->set_property = gst_omx_h265_enc_set_property;
   gobject_class->get_property = gst_omx_h265_enc_get_property;
@@ -161,6 +202,24 @@ gst_omx_h265_enc_class_init (GstOMXH265EncClass * klass)
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
           GST_PARAM_MUTABLE_READY));
 #endif
+#ifdef USE_OMX_TARGET_RCAR
+  g_object_class_install_property (gobject_class, PROP_SEND_EOS,
+      g_param_spec_boolean ("send-eos",
+          "Send EOS/EOF data to downstream",
+          "Send EOS/EOF data to downstream",
+          GST_OMX_H265_VIDEO_ENC_SEND_EOS_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
+
+  g_object_class_install_property (gobject_class, PROP_USE_INCAPS_HEADER,
+      g_param_spec_boolean ("use-incaps-header",
+          "Caps codec header",
+          "Send codec header via caps"
+          "(deprecated, not necessary now and can leads to performance deterioration)",
+          GST_OMX_H265_VIDEO_ENC_USE_INCAPS_HEADER_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY | G_PARAM_DEPRECATED));
+#endif
 
   videoenc_class->cdata.default_src_template_caps = "video/x-h265, "
       "width=(int) [ 1, MAX ], " "height=(int) [ 1, MAX ], "
@@ -200,6 +259,16 @@ gst_omx_h265_enc_set_property (GObject * object, guint prop_id,
       self->loop_filter_mode = g_value_get_enum (value);
       break;
 #endif
+#ifdef USE_OMX_TARGET_RCAR
+    case PROP_SEND_EOS:
+      self->send_eos = g_value_get_boolean (value);
+      break;
+    case PROP_USE_INCAPS_HEADER:
+      GST_WARNING_OBJECT (self,
+          "The option \"use_incaps_header\" is deprecated");
+      self->use_incaps_header = g_value_get_boolean (value);
+      break;
+#endif
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -230,6 +299,14 @@ gst_omx_h265_enc_get_property (GObject * object, guint prop_id, GValue * value,
       g_value_set_enum (value, self->loop_filter_mode);
       break;
 #endif
+#ifdef USE_OMX_TARGET_RCAR
+    case PROP_SEND_EOS:
+      g_value_set_boolean (value, self->send_eos);
+      break;
+    case PROP_USE_INCAPS_HEADER:
+      g_value_set_boolean (value, self->use_incaps_header);
+      break;
+#endif
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -249,6 +326,10 @@ gst_omx_h265_enc_init (GstOMXH265Enc * self)
       GST_OMX_H265_VIDEO_ENC_CONSTRAINED_INTRA_PREDICTION_DEFAULT;
   self->loop_filter_mode = GST_OMX_H265_VIDEO_ENC_LOOP_FILTER_MODE_DEFAULT;
 #endif
+#ifdef USE_OMX_TARGET_RCAR
+  self->send_eos = GST_OMX_H265_VIDEO_ENC_SEND_EOS_DEFAULT;
+  self->use_incaps_header = GST_OMX_H265_VIDEO_ENC_USE_INCAPS_HEADER_DEFAULT;
+#endif
 }
 
 /* Update OMX_VIDEO_PARAM_PROFILELEVELTYPE.{eProfile,eLevel}
@@ -519,6 +600,72 @@ unsupported_level:
   return FALSE;
 }
 
+#ifdef USE_OMX_TARGET_RCAR
+static gboolean
+keep_level_caps (GstOMXVideoEnc * enc, const gchar ** level)
+{
+  GstOMXH265Enc *self = GST_OMX_H265_ENC (enc);
+  GstCaps *peercaps = gst_pad_peer_query_caps (GST_VIDEO_ENCODER_SRC_PAD (enc),
+      gst_pad_get_pad_template_caps (GST_VIDEO_ENCODER_SRC_PAD (enc)));
+  GstStructure *s = gst_caps_get_structure (peercaps, 0);
+  const gchar *level_string = gst_structure_get_string (s, "level");
+
+  if (level_string && (!g_str_equal (level_string, *level))) {
+    /* FIXME: Currently, level=1 is auto judgment mode */
+    if (g_str_equal (level_string, "1")) {
+      GST_WARNING_OBJECT (self,
+          "level: %s changed to appropriate level: %s. Video bitstream will have level %s",
+          level_string, *level, *level);
+      *level = level_string;
+    } else {
+      GST_ERROR_OBJECT (self,
+          "Incorrect level: expect level %s actual level %s",
+          level_string, *level);
+      gst_caps_unref (peercaps);
+      return FALSE;
+    }
+  }
+
+  return TRUE;
+}
+
+static void
+inform_port_parameters (GstOMXH265Enc * self)
+{
+  OMX_VIDEO_CONFIG_HEVCINTRAPERIOD config_hevcintraperiod;
+  OMX_VIDEO_PARAM_HEVCTYPE param_hevc;
+  OMX_ERRORTYPE err;
+
+  GST_OMX_INIT_STRUCT (&config_hevcintraperiod);
+  config_hevcintraperiod.nPortIndex =
+      GST_OMX_VIDEO_ENC (self)->enc_out_port->index;
+  err =
+      gst_omx_component_get_config (GST_OMX_VIDEO_ENC (self)->enc,
+      OMX_IndexConfigVideoHEVCIntraPeriod, &config_hevcintraperiod);
+  if (err != OMX_ErrorNone)
+    GST_ERROR_OBJECT (self,
+        "Can't get OMX_IndexConfigVideoHEVCIntraPeriod %s (0x%08x)",
+        gst_omx_error_to_string (err), err);
+
+  GST_OMX_INIT_STRUCT (&param_hevc);
+  param_hevc.nPortIndex = GST_OMX_VIDEO_ENC (self)->enc_out_port->index;
+  err =
+      gst_omx_component_get_parameter (GST_OMX_VIDEO_ENC (self)->enc,
+      OMX_IndexParamVideoHevc, &param_hevc);
+  if (err != OMX_ErrorNone)
+    GST_ERROR_OBJECT (self,
+        "Can't get OMX_IndexParamVideoHevc %s (0x%08x)",
+        gst_omx_error_to_string (err), err);
+
+  GST_INFO_OBJECT (self,
+      "OMX judgement: Video will be encoded with nIDRPeriod = %u"
+      " nPFrames = %u BFrames = %u nRefFrames = %u",
+      (guint) config_hevcintraperiod.nIDRPeriod,
+      (guint) param_hevc.nPFrames, (guint) param_hevc.nBFrames,
+      (guint) param_hevc.nRefFrames);
+}
+#endif
+
 static GstCaps *
 gst_omx_h265_enc_get_caps (GstOMXVideoEnc * enc, GstOMXPort * port,
     GstVideoCodecState * state)
@@ -528,6 +675,9 @@ gst_omx_h265_enc_get_caps (GstOMXVideoEnc * enc, GstOMXPort * port,
   OMX_ERRORTYPE err;
   OMX_VIDEO_PARAM_PROFILELEVELTYPE param;
   const gchar *profile, *level, *tier;
+#ifdef USE_OMX_TARGET_RCAR
+  GstCaps *peercaps = NULL;
+#endif
 
   GST_OMX_INIT_STRUCT (&param);
   param.nPortIndex = GST_OMX_VIDEO_ENC (self)->enc_out_port->index;
@@ -641,10 +791,76 @@ gst_omx_h265_enc_get_caps (GstOMXVideoEnc * enc, GstOMXPort * port,
         return NULL;
     }
 
+#ifdef USE_OMX_TARGET_RCAR
+    peercaps = gst_pad_peer_query_caps (GST_VIDEO_ENCODER_SRC_PAD (enc),
+        gst_pad_get_pad_template_caps (GST_VIDEO_ENCODER_SRC_PAD (enc)));
+
+    if (peercaps && !keep_level_caps (enc, &level))
+      return NULL;
+
+    inform_port_parameters (self);
+#endif
     gst_caps_set_simple (caps,
         "profile", G_TYPE_STRING, profile, "level", G_TYPE_STRING, level,
         "tier", G_TYPE_STRING, tier, NULL);
+#ifdef USE_OMX_TARGET_RCAR
+    if (peercaps)
+      gst_caps_unref (peercaps);
+#endif
   }
 
   return caps;
 }
+
+static GstFlowReturn
+gst_omx_h265_enc_handle_output_frame (GstOMXVideoEnc * enc, GstOMXPort * port,
+    GstOMXBuffer * buf, GstVideoCodecFrame * frame)
+{
+  GstOMXH265Enc *self = GST_OMX_H265_ENC (enc);
+
+#ifdef USE_OMX_TARGET_RCAR
+  if (self->use_incaps_header)
+    return
+        GST_OMX_VIDEO_ENC_CLASS
+        (gst_omx_h265_enc_parent_class)->handle_output_frame (enc, port, buf,
+        frame);
+#endif
+
+  if (buf->omx_buf->nFlags & OMX_BUFFERFLAG_CODECCONFIG) {
+    /* The codec data is SPS/PPS with a startcode => bytestream stream format
+     * For bytestream stream format the SPS/PPS is only in-stream and not
+     * in the caps!
+     */
+    if (buf->omx_buf->nFilledLen >= 4 &&
+        GST_READ_UINT32_BE (buf->omx_buf->pBuffer +
+            buf->omx_buf->nOffset) == 0x00000001) {
+      GstBuffer *hdrs;
+      GstMapInfo map = GST_MAP_INFO_INIT;
+
+      GST_DEBUG_OBJECT (self, "got codecconfig in byte-stream format");
+
+      hdrs = gst_buffer_new_and_alloc (buf->omx_buf->nFilledLen);
+
+      gst_buffer_map (hdrs, &map, GST_MAP_WRITE);
+      memcpy (map.data,
+          buf->omx_buf->pBuffer + buf->omx_buf->nOffset,
+          buf->omx_buf->nFilledLen);
+      gst_buffer_unmap (hdrs, &map);
+      self->headers = g_list_append (self->headers, hdrs);
+
+      if (frame)
+        gst_video_codec_frame_unref (frame);
+
+      return GST_FLOW_OK;
+    }
+  } else if (self->headers) {
+    /* When alignment=au, headers should be sent with data frame */
+    enc->headers = self->headers;
+    self->headers = NULL;
+  }
+
+  return
+      GST_OMX_VIDEO_ENC_CLASS
+      (gst_omx_h265_enc_parent_class)->handle_output_frame (enc, port, buf,
+      frame);
+}
diff --git a/omx/gstomxh265enc.h b/omx/gstomxh265enc.h
index c53be18..1d50aab 100644
--- a/omx/gstomxh265enc.h
+++ b/omx/gstomxh265enc.h
@@ -55,6 +55,12 @@ struct _GstOMXH265Enc
   gboolean constrained_intra_prediction;
   guint32 loop_filter_mode;
 #endif
+#ifdef USE_OMX_TARGET_RCAR
+  gboolean send_eos;
+  gboolean use_incaps_header;
+#endif
+
+  GList *headers;
 };
 
 struct _GstOMXH265EncClass
diff --git a/omx/gstomxvideoenc.c b/omx/gstomxvideoenc.c
index e19a29e..fe8c1bc 100644
--- a/omx/gstomxvideoenc.c
+++ b/omx/gstomxvideoenc.c
@@ -45,6 +45,9 @@
 #if defined (USE_OMX_TARGET_RCAR)
 #include "gstomxh264enc.h"
 #endif
+#if defined (USE_OMX_TARGET_RCAR) && defined (HAVE_HEVC)
+#include "gstomxh265enc.h"
+#endif
 #if defined (USE_OMX_TARGET_RCAR) && defined (HAVE_VIDEOENC_EXT)
 #include "OMXR_Extension_vecmn.h"
 #endif
@@ -1537,7 +1540,12 @@ gst_omx_video_enc_handle_output_frame (GstOMXVideoEnc * self, GstOMXPort * port,
           gst_video_encoder_finish_frame (GST_VIDEO_ENCODER (self), frame);
     } else {
 #ifdef USE_OMX_TARGET_RCAR
-      if (GST_IS_OMX_H264_ENC (self) && !GST_OMX_H264_ENC (self)->send_eos) {
+      if ((GST_IS_OMX_H264_ENC (self) && !GST_OMX_H264_ENC (self)->send_eos)
+#ifdef HAVE_HEVC
+          || (GST_IS_OMX_H265_ENC (self) && !GST_OMX_H265_ENC (self)->send_eos)) {
+#else
+          ) {
+#endif
         GST_DEBUG_OBJECT (self, "Skip sending EOS/EOF data to downstream");
         gst_buffer_unref (outbuf);
       } else
-- 
2.7.4

