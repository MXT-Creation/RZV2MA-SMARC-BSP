diff -ur a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
--- a/omx/gstomxvideodec.c	2022-09-15 17:42:08.903176706 +0900
+++ b/omx/gstomxvideodec.c	2022-09-15 11:55:29.235601139 +0900
@@ -96,6 +96,10 @@
 
 static gboolean get_crop_info (GstOMXVideoDec * self, crop_info * c_info);
 
+#ifdef OMX_TARGET_RCAR_RZV2M
+static guint8 * gst_omx_video_dec_get_startcode_length (guint8 * start, guint8 * end, guint * len);
+#endif
+
 enum
 {
   PROP_0,
@@ -1906,14 +1910,6 @@
         goto caps_failed;
       }
 
-#ifdef OMX_TARGET_RCAR_RZV2M
-      /* Cannot get correct width and height when using H265 decorder. */
-      if (port_def.format.video.nFrameWidth == 0 || port_def.format.video.nFrameHeight == 0) {
-          port_def.format.video.nFrameWidth = port->port_def.format.video.nFrameWidth;
-          port_def.format.video.nFrameHeight = port->port_def.format.video.nFrameHeight;
-      }
-#endif
-
       GST_DEBUG_OBJECT (self,
           "Setting output state: format %s (%d), width %u, height %u",
           gst_video_format_to_string (format),
@@ -3099,6 +3095,34 @@
   return TRUE;
 }
 
+#ifdef OMX_TARGET_RCAR_RZV2M
+static guint8 *
+gst_omx_video_dec_get_startcode_length (guint8 * start, guint8 * end, guint * len)
+{
+  if ((NULL == start) || (NULL == end) || (NULL == len)) {
+    return NULL;
+  }
+
+  *len = 0;
+
+  while (start <= (end - 4)) {
+    while ((0 != *start) && (start <= (end - 4))) {
+      start++;
+    }
+    if ((0 == *start) && (0 == *(start + 1)) && (0 == *(start + 2)) && (1 == *(start + 3))) {
+      *len = 4;
+      return start;
+    }
+    else if ((0 == *start) && (0 == *(start + 1)) && (1 == *(start + 2))) {
+      *len = 3;
+      return start;
+    }
+    start ++;
+  }
+  return NULL;
+}
+#endif
+
 static GstFlowReturn
 gst_omx_video_dec_handle_frame (GstVideoDecoder * decoder,
     GstVideoCodecFrame * frame)
@@ -3355,104 +3379,143 @@
 #ifdef OMX_TARGET_RCAR_RZV2M
       } else if (GST_IS_OMX_H264_DEC (self) || GST_IS_OMX_H265_DEC (self)) {
         GstMapInfo map;
-        int idx;
         int frame_split_offset = -1;
         int found_decode_info = 0;
-        int found_key_frame = 0;
-        #define START_PLUS_SZ (4 + 1) // 00 00 00 01 xx
+        int found_eos_header = 0;
+        guint startcode_len = 0;
+        guint8 next_nal_unit_type = 0;
+        guint8 *next_nal = NULL;
+        guint8 *startcode = NULL;
+        guint8 *data_end = NULL;
 
         if (!gst_buffer_map (frame->input_buffer, &map, GST_MAP_READ)) {
           GST_ERROR_OBJECT (self, "Failed to create a GstBuffer mapping");
           goto map_failed;
         }
 
-        /* remove AUD */
-        while (offset + 6 <= buf->omx_buf->nFilledLen) {
-          if (map.data[offset] == 0x00 && map.data[offset + 1] == 0x00 && map.data[offset + 2] == 0x00
-            && map.data[offset + 3] == 0x01 && map.data[offset + 4] == 0x09) {
-            GST_LOG_OBJECT (self,
-              "Remove AUD data [%02x %02x %02x %02x %02x %02x], offset=%u",
-              map.data[offset + 0], map.data[offset + 1], map.data[offset + 2],
-              map.data[offset + 3], map.data[offset + 4], map.data[offset + 5],
-              offset);
-            offset += 6;
-            buf->omx_buf->nFilledLen -= 6;
-          }
-          else {
-            break;
-          }
-        }
+        data_end = &map.data[offset + buf->omx_buf->nFilledLen];
 
         if (GST_IS_OMX_H264_DEC (self)) {
           #define NAL_UNIT_MASK    (0x1F)
           #define NAL_UNIT_SPS     (7)
           #define NAL_UNIT_PPS     (8)
-          #define NAL_UNIT_I_FRAME (5)
+          #define NAL_UNIT_AUD     (9)
+          #define NAL_UNIT_EOSEQ   (10)
+          #define NAL_UNIT_EOS     (11)
+
+          /* remove AUD */
+          startcode = gst_omx_video_dec_get_startcode_length(&map.data[offset], data_end, &startcode_len);
+          while ((startcode == &map.data[offset]) && (offset + startcode_len + 2 <= buf->omx_buf->nFilledLen)) {
+            next_nal = &map.data[offset + startcode_len];
+            next_nal_unit_type = *next_nal & NAL_UNIT_MASK;
+
+            if (next_nal_unit_type == NAL_UNIT_AUD) {
+              GST_LOG_OBJECT (self,
+                "Remove AUD data, offset=%u startcode_len=%u",
+                offset, startcode_len);
+              offset += startcode_len + 2;
+              buf->omx_buf->nFilledLen -= startcode_len + 2;
+            }
+            else {
+              break;
+            }
+            startcode = gst_omx_video_dec_get_startcode_length(&map.data[offset], data_end, &startcode_len);
+          }
 
-          if (offset + START_PLUS_SZ <= buf->omx_buf->nFilledLen) {
-            if (map.data[offset] == 0x00 && map.data[offset + 1] == 0x00 && map.data[offset + 2] == 0x00 && map.data[offset + 3] == 0x01) {
-              if ((map.data[offset + 4] & NAL_UNIT_MASK) == NAL_UNIT_SPS
-                || (map.data[offset + 4] & NAL_UNIT_MASK) == NAL_UNIT_PPS) {
-                found_decode_info = 1;
-                buf->omx_buf->nFlags |= OMX_BUFFERFLAG_CODECCONFIG;
-              }
-              else if ((map.data[offset + 4] & NAL_UNIT_MASK) == NAL_UNIT_I_FRAME) {
-                found_key_frame = 1;
-              }
+          startcode = gst_omx_video_dec_get_startcode_length(&map.data[offset], data_end, &startcode_len);
+          if ((startcode == &map.data[offset]) && (offset + startcode_len + 1  <= buf->omx_buf->nFilledLen)) {
+            next_nal = &map.data[offset + startcode_len];
+            next_nal_unit_type = *next_nal & NAL_UNIT_MASK;
+
+            if ((next_nal_unit_type == NAL_UNIT_SPS) || (next_nal_unit_type == NAL_UNIT_PPS)) {
+              found_decode_info = 1;
+              buf->omx_buf->nFlags |= OMX_BUFFERFLAG_CODECCONFIG;
+            } else if ((next_nal_unit_type == NAL_UNIT_EOSEQ) || (next_nal_unit_type == NAL_UNIT_EOS)) {
+              found_eos_header = 1;
+              buf->omx_buf->nFlags |= OMX_BUFFERFLAG_CODECCONFIG | OMX_BUFFERFLAG_EOS;
             }
 
-            for (idx = offset + START_PLUS_SZ; idx < buf->omx_buf->nFilledLen - START_PLUS_SZ; idx++) {
-              if (map.data[idx] == 0x00 && map.data[idx + 1] == 0x00 && map.data[idx + 2] == 0x00 && map.data[idx + 3] == 0x01) {
-                /* If the frame data starts with SPS/PPS, split at the next NAL that is not SPS/PPS.
-                 * If the frame data starts with I-Frame, split at the next NAL.
+            while (NULL != startcode) {
+              startcode = gst_omx_video_dec_get_startcode_length(next_nal, data_end, &startcode_len);
+
+              if (NULL != startcode) {
+                next_nal = startcode + startcode_len;
+                next_nal_unit_type = *next_nal & NAL_UNIT_MASK;
+
+                /* If the frame data starts with SPS/PPS, split at the next NAL that is not SPS/PPS/EOSEQ/EOS.
                  * If the frame data doesn't start with SPS/PPS, split at the next SPS/PPS NAL.
-                 * Split at the next I-Frame NAL.
+                 * If find the frame data with EOSEQ/EOS, split at the next NAL.
                  */
-                if ((found_decode_info && (map.data[idx + 4] & NAL_UNIT_MASK) != NAL_UNIT_SPS && (map.data[idx + 4] & NAL_UNIT_MASK) != NAL_UNIT_PPS)
-                  || (found_key_frame)
-                  || (!found_decode_info && ((map.data[idx + 4] & NAL_UNIT_MASK) == NAL_UNIT_SPS || (map.data[idx + 4] & NAL_UNIT_MASK) == NAL_UNIT_PPS))
-                  || ((map.data[idx + 4] & NAL_UNIT_MASK) == NAL_UNIT_I_FRAME)) {
-                  frame_split_offset = idx - offset;
+                if ((found_decode_info && (next_nal_unit_type != NAL_UNIT_SPS) && (next_nal_unit_type != NAL_UNIT_PPS) && (next_nal_unit_type != NAL_UNIT_EOSEQ) && (next_nal_unit_type != NAL_UNIT_EOS))
+                  || (!found_decode_info && ((next_nal_unit_type == NAL_UNIT_SPS) || (next_nal_unit_type == NAL_UNIT_PPS)))
+                  || (found_eos_header)) {
+                  frame_split_offset = startcode - &map.data[offset];
                   break;
+                } else if ((next_nal_unit_type == NAL_UNIT_EOSEQ) || (next_nal_unit_type == NAL_UNIT_EOS)) {
+                  found_eos_header = 1;
                 }
               }
             }
           }
         } else if (GST_IS_OMX_H265_DEC (self)) {
-          #define NAL_UNIT_VPS (0x40)
-          #define NAL_UNIT_SPS (0x42)
-          #define NAL_UNIT_PPS (0x44)
-          #define NAL_UNIT_I_FRAME_16 (0x20)
-          #define NAL_UNIT_I_FRAME_17 (0x22)
-          #define NAL_UNIT_I_FRAME_18 (0x24)
-          #define NAL_UNIT_I_FRAME_19 (0x26)
-          #define NAL_UNIT_I_FRAME_20 (0x28)
-          #define NAL_UNIT_I_FRAME_21 (0x2A)
-          if (offset + START_PLUS_SZ <= buf->omx_buf->nFilledLen) {
-            if (map.data[offset] == 0x00 && map.data[offset + 1] == 0x00 && map.data[offset + 2] == 0x00 && map.data[offset + 3] == 0x01) {
-              if (map.data[offset + 4] == NAL_UNIT_VPS || map.data[offset + 4] == NAL_UNIT_SPS || map.data[offset + 4] == NAL_UNIT_PPS) {
-                found_decode_info = 1;
-                buf->omx_buf->nFlags |= OMX_BUFFERFLAG_CODECCONFIG;
-              } else if (map.data[offset + 4] == NAL_UNIT_I_FRAME_16 || map.data[offset + 4] == NAL_UNIT_I_FRAME_17 || map.data[offset + 4] == NAL_UNIT_I_FRAME_18
-                         || map.data[offset + 4] == NAL_UNIT_I_FRAME_19 || map.data[offset + 4] == NAL_UNIT_I_FRAME_20 || map.data[offset + 4] == NAL_UNIT_I_FRAME_21) {
-                found_key_frame = 1;
-              }
+          #define NAL_UNIT_MASK  (0x7E)
+          #define NAL_UNIT_VPS   (32)
+          #define NAL_UNIT_SPS   (33)
+          #define NAL_UNIT_PPS   (34)
+          #define NAL_UNIT_AUD   (35)
+          #define NAL_UNIT_EOS   (36)
+          #define NAL_UNIT_EOB   (37)
+
+          /* remove AUD */
+          startcode = gst_omx_video_dec_get_startcode_length(&map.data[offset], data_end, &startcode_len);
+          while ((startcode == &map.data[offset]) && (offset + startcode_len + 2 <= buf->omx_buf->nFilledLen)) {
+            next_nal = &map.data[offset + startcode_len];
+            next_nal_unit_type = (*next_nal & NAL_UNIT_MASK) >> 1;
+
+            if (next_nal_unit_type == NAL_UNIT_AUD) {
+              GST_LOG_OBJECT (self,
+                "Remove AUD data, offset=%u startcode_len=%u",
+                offset, startcode_len);
+              offset += startcode_len + 2;
+              buf->omx_buf->nFilledLen -= startcode_len + 2;
             }
+            else {
+              break;
+            }
+            startcode = gst_omx_video_dec_get_startcode_length(&map.data[offset], data_end, &startcode_len);
+          }
+
+          startcode = gst_omx_video_dec_get_startcode_length(&map.data[offset], data_end, &startcode_len);
+          if ((startcode == &map.data[offset]) && (offset + startcode_len + 1 <= buf->omx_buf->nFilledLen)) {
+            next_nal = &map.data[offset + startcode_len];
+            next_nal_unit_type = (*next_nal & NAL_UNIT_MASK) >> 1;
+
+            if ((next_nal_unit_type == NAL_UNIT_VPS) || (next_nal_unit_type == NAL_UNIT_SPS) || (next_nal_unit_type == NAL_UNIT_PPS)) {
+              found_decode_info = 1;
+              buf->omx_buf->nFlags |= OMX_BUFFERFLAG_CODECCONFIG;
+            } else if ((next_nal_unit_type == NAL_UNIT_EOS) || (next_nal_unit_type == NAL_UNIT_EOB)) {
+              found_eos_header = 1;
+              buf->omx_buf->nFlags |= OMX_BUFFERFLAG_CODECCONFIG | OMX_BUFFERFLAG_EOS;
+            }
+
+            while (NULL != startcode) {
+              startcode = gst_omx_video_dec_get_startcode_length(next_nal, data_end, &startcode_len);
+
+              if (NULL != startcode) {
+                next_nal = startcode + startcode_len;
+                next_nal_unit_type = (*next_nal & NAL_UNIT_MASK) >> 1;
 
-            for (idx = offset + START_PLUS_SZ; idx < buf->omx_buf->nFilledLen - START_PLUS_SZ; idx++) {
-              if (map.data[idx] == 0x00 && map.data[idx + 1] == 0x00 && map.data[idx + 2] == 0x00 && map.data[idx + 3] == 0x01) {
-                /* If the frame data starts with VPS/SPS/PPS, split at the next NAL that is not VPS/SPS/PPS.
-                 * If the frame data starts with I-Frame, split at the next NAL.
+                /* If the frame data starts with VPS/SPS/PPS, split at the next NAL that is not VPS/SPS/PPS/EOS/EOB.
                  * If the frame data doesn't start with VPS/SPS/PPS, split at the next VPS/SPS/PPS NAL.
-                 * Split at the next I-Frame NAL.
+                 * If find the frame data with EOSEQ/EOS, split at the next NAL.
                  */
-                if ((found_decode_info && map.data[idx + 4] != NAL_UNIT_VPS && map.data[idx + 4] != NAL_UNIT_SPS && map.data[idx + 4] != NAL_UNIT_PPS)
-                  || (found_key_frame)
-                  || (!found_decode_info && (map.data[idx + 4] == NAL_UNIT_VPS || map.data[idx + 4] == NAL_UNIT_SPS || map.data[idx + 4] == NAL_UNIT_PPS))
-                  || (map.data[offset + 4] == NAL_UNIT_I_FRAME_16 || map.data[offset + 4] == NAL_UNIT_I_FRAME_17 || map.data[offset + 4] == NAL_UNIT_I_FRAME_18
-                         || map.data[offset + 4] == NAL_UNIT_I_FRAME_19 || map.data[offset + 4] == NAL_UNIT_I_FRAME_20 || map.data[offset + 4] == NAL_UNIT_I_FRAME_21)) {
-                  frame_split_offset = idx - offset;
+                if ((found_decode_info && (next_nal_unit_type != NAL_UNIT_VPS) && (next_nal_unit_type != NAL_UNIT_SPS) && (next_nal_unit_type != NAL_UNIT_PPS) && (next_nal_unit_type != NAL_UNIT_EOS) && (next_nal_unit_type != NAL_UNIT_EOB))
+                  || (!found_decode_info && ((next_nal_unit_type == NAL_UNIT_VPS) || (next_nal_unit_type == NAL_UNIT_SPS) || (next_nal_unit_type == NAL_UNIT_PPS)))
+                  || (found_eos_header)) {
+                  frame_split_offset = startcode - &map.data[offset];
                   break;
+                } else if ((next_nal_unit_type == NAL_UNIT_EOS) || (next_nal_unit_type == NAL_UNIT_EOB)) {
+                  found_eos_header = 1;
                 }
               }
             }
